//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34014
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FirmwarePacking.Repositories.Remote.SautRepoApi {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PackageDescription", Namespace="http://schemas.datacontract.org/2004/07/SautRepo.Api")]
    [System.SerializableAttribute()]
    public partial class PackageDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FirmwarePacking.PackageInformation InformationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FirmwarePacking.PackageInformation Information {
            get {
                return this.InformationField;
            }
            set {
                if ((object.ReferenceEquals(this.InformationField, value) != true)) {
                    this.InformationField = value;
                    this.RaisePropertyChanged("Information");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SautRepoApi.ISfpRepositoryService")]
    public interface ISfpRepositoryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISfpRepositoryService/GetCompositeTypes", ReplyAction="http://tempuri.org/ISfpRepositoryService/GetCompositeTypesResponse")]
        FirmwarePacking.Repositories.Remote.SautRepoApi.PackageDescription[] GetCompositeTypes(int CellId, int ModuleId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISfpRepositoryService/GetCompositeTypes", ReplyAction="http://tempuri.org/ISfpRepositoryService/GetCompositeTypesResponse")]
        System.IAsyncResult BeginGetCompositeTypes(int CellId, int ModuleId, System.AsyncCallback callback, object asyncState);
        
        FirmwarePacking.Repositories.Remote.SautRepoApi.PackageDescription[] EndGetCompositeTypes(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISfpRepositoryServiceChannel : FirmwarePacking.Repositories.Remote.SautRepoApi.ISfpRepositoryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCompositeTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCompositeTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public FirmwarePacking.Repositories.Remote.SautRepoApi.PackageDescription[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((FirmwarePacking.Repositories.Remote.SautRepoApi.PackageDescription[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SfpRepositoryServiceClient : System.ServiceModel.ClientBase<FirmwarePacking.Repositories.Remote.SautRepoApi.ISfpRepositoryService>, FirmwarePacking.Repositories.Remote.SautRepoApi.ISfpRepositoryService {
        
        private BeginOperationDelegate onBeginGetCompositeTypesDelegate;
        
        private EndOperationDelegate onEndGetCompositeTypesDelegate;
        
        private System.Threading.SendOrPostCallback onGetCompositeTypesCompletedDelegate;
        
        public SfpRepositoryServiceClient() {
        }
        
        public SfpRepositoryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SfpRepositoryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SfpRepositoryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SfpRepositoryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetCompositeTypesCompletedEventArgs> GetCompositeTypesCompleted;
        
        public FirmwarePacking.Repositories.Remote.SautRepoApi.PackageDescription[] GetCompositeTypes(int CellId, int ModuleId) {
            return base.Channel.GetCompositeTypes(CellId, ModuleId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCompositeTypes(int CellId, int ModuleId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCompositeTypes(CellId, ModuleId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public FirmwarePacking.Repositories.Remote.SautRepoApi.PackageDescription[] EndGetCompositeTypes(System.IAsyncResult result) {
            return base.Channel.EndGetCompositeTypes(result);
        }
        
        private System.IAsyncResult OnBeginGetCompositeTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int CellId = ((int)(inValues[0]));
            int ModuleId = ((int)(inValues[1]));
            return this.BeginGetCompositeTypes(CellId, ModuleId, callback, asyncState);
        }
        
        private object[] OnEndGetCompositeTypes(System.IAsyncResult result) {
            FirmwarePacking.Repositories.Remote.SautRepoApi.PackageDescription[] retVal = this.EndGetCompositeTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCompositeTypesCompleted(object state) {
            if ((this.GetCompositeTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCompositeTypesCompleted(this, new GetCompositeTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCompositeTypesAsync(int CellId, int ModuleId) {
            this.GetCompositeTypesAsync(CellId, ModuleId, null);
        }
        
        public void GetCompositeTypesAsync(int CellId, int ModuleId, object userState) {
            if ((this.onBeginGetCompositeTypesDelegate == null)) {
                this.onBeginGetCompositeTypesDelegate = new BeginOperationDelegate(this.OnBeginGetCompositeTypes);
            }
            if ((this.onEndGetCompositeTypesDelegate == null)) {
                this.onEndGetCompositeTypesDelegate = new EndOperationDelegate(this.OnEndGetCompositeTypes);
            }
            if ((this.onGetCompositeTypesCompletedDelegate == null)) {
                this.onGetCompositeTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCompositeTypesCompleted);
            }
            base.InvokeAsync(this.onBeginGetCompositeTypesDelegate, new object[] {
                        CellId,
                        ModuleId}, this.onEndGetCompositeTypesDelegate, this.onGetCompositeTypesCompletedDelegate, userState);
        }
    }
}
